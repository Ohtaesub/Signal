<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.signal.resume.dao.ResumeDAO">

	<select id="list" resultType="resume" parameterType="String">
		SELECT re_no, re_title, jp_name, jc_name FROM resume r
		LEFT OUTER JOIN job_pa jp ON r.jp_no = jp.jp_no
		LEFT OUTER JOIN job_ch jc ON r.jc_no = jc.jc_no  
		WHERE cl_id=#{id}
	</select>
	
	<!-- 필요한 컬럼 추가했습니다. by태섭 -->
	<select id="personList" resultType="resume">
		SELECT cl_age, cl_gender, (SUM(inter_grade)/COUNT(inter_comment)) AS avr_inter_grade,  r.re_title , r.re_no ,
		COUNT(DISTINCT inter_comment) as cnt_inter, (SUM(st_score)/COUNT(st_comment)) AS avr_st_score FROM client c 
		LEFT OUTER JOIN self_test_result str ON c.cl_id = str.cl_id 
		LEFT OUTER JOIN interview i ON c.cl_id = i.cl_id
		left outer join resume r on r.cl_id = c.cl_id 
		GROUP BY c.cl_id 
	</select>
	
	<!-- 필요한 컬럼 추가했습니다. by태섭 -->
	<select id="personList2" parameterType="hashmap" resultType="resume">
		SELECT cl_age, cl_gender, (SUM(inter_grade)/COUNT(inter_comment)) AS avr_inter_grade,  r.re_title , r.re_no ,
		COUNT(DISTINCT inter_comment) as cnt_inter, (SUM(st_score)/COUNT(st_comment)) AS avr_st_score FROM client c 
		LEFT OUTER JOIN self_test_result str ON c.cl_id = str.cl_id 
		LEFT OUTER JOIN interview i ON c.cl_id = i.cl_id
		left outer join resume r on r.cl_id = c.cl_id  
		GROUP BY c.cl_id 
		<where>
			<if test="startAge != null and endAge != null and searchCondition != null">
				<if test="startAge != '' and endAge != ''">
					<![CDATA[
					AND cl_age >= #{startAge}
					AND cl_age <= #{endAge}
					]]>
				<if test="searchCondition.equals('grade')">
					ORDER BY avr_inter_grade DESC	
				</if>
				</if>
			</if>
		</where>
		LIMIT #{cnt} OFFSET #{offset}
	</select>
	
	<select id="allCount" parameterType="hashmap" resultType="int">
		SELECT COUNT(DISTINCT c.cl_id) FROM client c 
		LEFT OUTER JOIN self_test_result str ON c.cl_id = str.cl_id 
		LEFT OUTER JOIN interview i ON c.cl_id = i.cl_id		
		<where>
			<if test="startAge != null and endAge != null and searchCondition != null">
				<if test="startSearch != '' and endSearch != ''">
					<![CDATA[
					AND cl_age >= #{startSearch}
					AND cl_age <= #{endSearch}
					]]>
					<if test="searchCondition.equals('grade')">
						ORDER BY avr_inter_grade DESC
					</if>
				</if>
			</if>
		</where>
	</select>
	
	<select id="resumeDetail" resultType="resume" parameterType="String">
	SELECT re_title, re_fn_status, re_sch_name, re_sch_period, re_major, re_average, re_total, re_register, re_intro, re_portfolio, jp_name, jc_name
	,cl_name, cl_call, cl_address, cl_birth, cl_email, cl_gender, cl_photo, cl_age FROM resume r 
	LEFT OUTER JOIN job_pa jp ON jp.jp_no = r.jp_no
	LEFT OUTER JOIN job_ch jc ON jc.jc_no = r.jc_no 
	LEFT OUTER JOIN client c ON c.cl_id = r.cl_id
	WHERE r.re_no = #{re_no}
	</select>
	
	<select id="careerDetail" resultType="resume" parameterType="String">
	SELECT r.re_no, ca_no, ca_com_name, ca_period, ca_job, ca_content FROM career c 
	LEFT OUTER JOIN resume r ON c.re_no = r.re_no
	WHERE r.re_no = #{re_no}
	</select>
	
	<select id="socialDetail" resultType="resume" parameterType="String">
	SELECT r.re_no, soc_no, soc_field, soc_name, soc_content, soc_period FROM social s 
	LEFT OUTER JOIN resume r ON s.re_no = r.re_no
	WHERE r.re_no = #{re_no}
	</select>
	
	<select id="licenseDetail" resultType="resume" parameterType="String">
	SELECT r.re_no, li_no, li_field, li_date, li_org, li_name FROM license l 
	LEFT OUTER JOIN resume r ON l.re_no = r.re_no
	WHERE r.re_no = #{re_no}
	</select>
	
	<select id="recommendDetail" resultType="resume" parameterType="String">
	SELECT r.reco_no, reco_cl_id, reco_req_memo, reco_date FROM resume r
	LEFT OUTER JOIN recommend r2 ON r.reco_no = r2.reco_no
	WHERE r.re_no = #{re_no}
	</select>
	
	<select id="recommendUp" resultType="resume" parameterType="String">
	SELECT reco_no, reco_cl_id, reco_req_memo, reco_date FROM recommend r
	WHERE cl_id = #{id} AND reco_req_memo != ""
	</select>
	
	<select id="resumeRegDetail" resultType="resume" parameterType="String">
	SELECT cl_name, cl_call, cl_address, cl_birth, cl_email, cl_gender, cl_photo, cl_age FROM client c	
	WHERE cl_id = #{id}
	</select>
	
	<insert id="resumeRegB"
		useGeneratedKeys="true"
		keyColumn="re_no"
		keyProperty="re_no" 
		parameterType="resume">
	INSERT INTO resume(cl_id, re_title, re_fn_status, re_sch_name, re_sch_period, re_major, re_average, re_total, re_register, re_intro, re_portfolio)
	VALUES (#{cl_id},#{re_title},#{re_fn_status},#{re_sch_name},#{re_sch_period},#{re_major},#{re_average},#{re_total},#{re_register},#{re_intro},#{re_portfolio})
	</insert>
	
	<update id="resumeReg">
	UPDATE resume SET 
	jp_no = #{param1}, 
	jc_no = #{param2}
	WHERE re_no = #{param3}
	</update>
	
	<select id="jpList" resultType="resume">
		SELECT jp_no, jp_name, jp_hidden FROM job_pa
		WHERE jp_no > 1
	</select>
	
	<select id="jcList" resultType="resume" parameterType="String">
		SELECT jp_no, jc_no, jc_name, jc_hidden FROM job_ch
		WHERE jp_no=#{jp_no}
	</select>
	
	<select id="jcCheck" resultType="resume" parameterType="String">
		SELECT jc.jp_no, jc_no, jp_name, jc_name, jc_hidden FROM job_ch jc 
		LEFT OUTER JOIN job_pa jp on jp.jp_no = jc.jp_no 
		WHERE jc_no=#{jc_no};
	</select>
	
	<insert id="careerReg" parameterType="hashmap">
	INSERT INTO career(re_no, ca_com_name, ca_period, ca_job, ca_content)
	VALUES (#{re_no},#{ca_com_name},#{ca_period},#{ca_job},#{ca_content})
	</insert>
	
	<insert id="socialReg" parameterType="hashmap">
	INSERT INTO social(re_no, soc_field, soc_name, soc_period, soc_content)
	VALUES (#{re_no},#{soc_field},#{soc_name},#{soc_period},#{soc_content})
	</insert>
	
	<insert id="licenseReg" parameterType="hashmap">
	INSERT INTO license(re_no, li_field, li_name, li_org, li_date)
	VALUES (#{re_no},#{li_field},#{li_name},#{li_org},#{li_date})
	</insert>
	
	<update id="recommendReg" parameterType="hashmap">
	UPDATE resume SET
	reco_no=#{reco_no}
	WHERE re_no=#{re_no}
	</update>
	
	<select id="recommendMe" resultType="resume" parameterType="String">
		SELECT reco_no, cl_id, reco_cl_id, reco_req_memo,reco_relation, reco_date FROM recommend
		WHERE cl_id=#{id} 
	</select>
	
	<!-- <select id="recommendYou" resultType="resume" parameterType="String">
		SELECT reco_no, cl_id, reco_req_memo, reco_content, reco_state, reco_relation, reco_date FROM recommend
		WHERE reco_cl_id=#{id} 
	</select> -->
	
	<select id="recommendUlist" resultType="resume" parameterType="String">
		SELECT reco_no, cl_id, reco_req_memo, reco_content, reco_state, reco_relation, reco_date FROM recommend
		WHERE reco_cl_id=#{id} 
	</select>
	
	<update id="careerUp" parameterType="hashmap">
	UPDATE career SET
	ca_com_name=#{ca_com_name},
	ca_period=#{ca_period},
	ca_job=#{ca_job},
	ca_content=#{ca_content}
	WHERE ca_no=#{ca_no}
	</update>
	
	<update id="socialUp" parameterType="hashmap">
	UPDATE social SET
	soc_field=#{soc_field},
	soc_name=#{soc_name},
	soc_period=#{soc_period},
	soc_content=#{soc_content}
	WHERE soc_no=#{soc_no}
	</update>
	
	<update id="licenseUp" parameterType="hashmap">
	UPDATE license SET
	li_field=#{li_field},
	li_name=#{li_name},
	li_org=#{li_org},
	li_date=#{li_date}
	WHERE li_no=#{li_no}
	</update>
	
	<delete id="careerDelete" parameterType="String">
	DELETE FROM career WHERE ca_no = #{ca_no}
	</delete>
	
	<delete id="socialDelete" parameterType="String">
	DELETE FROM social WHERE soc_no = #{soc_no}
	</delete>
	
	<delete id="licenseDelete" parameterType="String">
	DELETE FROM license WHERE li_no = #{li_no}
	</delete>
	
</mapper>